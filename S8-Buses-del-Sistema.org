#+options: H:2
#+latex_class: beamer
#+columns: %45ITEM %10BEAMER_env(Env) %10BEAMER_act(Act) %4BEAMER_col(Col) %8BEAMER_opt(Opt)
#+beamer_theme: {Madrid}
#+beamer_color_theme:
#+beamer_font_theme:
#+beamer_inner_theme:
#+beamer_outer_theme:
#+beamer_header:

#+title: S8-Buses-del-Sistema
#+date: 
#+author: Elizabeth Lopez, Francisco Morales, Juan Murillo , Angel Falcon
#+email: elizabeth.lopez@epn.edu.ec, francisco.morales01@epn.edu.ec, juan.murillo@epn.edu.ec,angel.falcon@epn.edu.ec
#+language: es
#+select_tags: export
#+exclude_tags: noexport
#+creator: Emacs 27.1 (Org mode 9.3)
#+cite_export: biblatex

#+bibliography: ./bibliography.bib
#+LATEX_HEADER: \nocite{*}
#+LATEX_HEADER: \usepackage[T1]{fontenc}
#+LATEX_HEADER: \usepackage[utf8]{inputenc}
#+LATEX_HEADER: \usepackage[spanish]{babel}
#+LATEX_HEADER: \usepackage[backend=biber,citestyle=apa, style=apa]{biblatex}


* Buses del Sistema (Sección)
** Estructuras de Interconexión (E1, 7, 97)

- Conjunto de líneas que conectan los módulos elementales de un computador.
  Para que se comuniquen e intercambien datos.
- La estructura depende de los intercambios que se produzcan en los módulos.

#+attr_latex: :width 0.3\textwidth
[[./Images/Modulos.jpg]]

** Estructuras de Interconexión (E1, 7, 97)
*Módulos:*

- **Memoria:** constituido por N palabras de igual longitud. Se pueden realizar las
  operaciones Read(Leer) y Write(Escribir). La posición de memoria se especifica
  mediante una dirección.
- **Módulo de E/S:** se encarga de controlar los dispositivos externos enlazados
  a los puertos, donde se les asignara una dirección M. Controla los datos de salida
  y entrada. Realiza las operaciones de lectura y escritura. Envía señales de interrupción.
- **Procesador:** lee instrucciones y datos. Escribe datos después de procesarlos y
  controla el funcionamiento del sistema. Puede recibir señales de interrupción.

** Estructuras de Interconexión (E1, 7, 97)
*Intercambios de Datos:*

- **Memoria a procesador:** el procesador lee información desde la memoria.
- **Procesador a memoria:** el procesador escribe un dato en la memoria.
- **E/S a procesador:** el procesador lee datos de un dispositivo de E/S.
- **Procesador a E/S:** el procesador envía datos al dispositivo de  E/S.
- **Memoria a E/S - E/S a Memoria:** ambos intercambian datos directamente.

* Interconexión con Buses (Sección)
** Interconexión con Buses (E1, 7, 99)

- Los buses son caminos de comunicación entre dos o más dispositivos con la
  habilidad de transmitir señales hacia los demás o recibir las señales emitidas.
- Solo un dispositivo puede emitir la señal en un periodo de tiempo. Si ambos
  transmiten la señal, esta podria solaparse y distorsionarse.
- Los caminos o lineas del bus transmiten señales binarias ya sea a travez de una
  sola línea o de varias de manera paralela.
- Existen diferentes tipos de buses para la comunicacion de diversos componentes.
  El que trabaja con los módulos elementales se denomina (System bus).

** Estructura del Bus  (E1, 7, 99)

#+ATTR_LATEX: :width 0.8\textwidth
[[./Images/Lineas.jpg]]

- ¿Qué tipos de líneas componen un Bus de Sistema?
  - Lineas de datos.
  - Lineas de direccion.
  - Lineas de control.

** Estructura del Bus
- ¿Qué son las líneas de datos?
  - Transporte
  - Datos
  - Memoria -> Procesador

** Estructura del Bus 
- ¿Qué son las líneas de dirección?
  - Ubicación
  - Memoria
  - Puertos de E/S
  - Anchura del bus
    
** Estructura del Bus 
- ¿Qué son las líneas de control?
  - Control
  - Señales
  - Escritura
  - Lectura

** Jerarquía de Buses Múltiples (E2, 7)
Si se conecta un gran número de dispositivos al bus, las prestaciones pueden disminuir. Hay dos causas principales: 

1. Mayor retarde de propagación. Este retardo determina el tiempo que necesitan los dispositivos para coordinarse en el uso del bus.

2. Posible cuello de botella. Este problema se puede resolver en alguna medida incrementando la velocidad a la que el bus puede transferir los datos y utilizando buses más anchos (por ejemplo incrementando el bus de datos de 32 a 64 bits) 
** Jerarquía de buses múltiples 
Por consiguiente, la mayoría de los computadores utilizan varios buses, normalmente organizados
jerárquicamente.

#+ATTR_LATEX: :width 0.8\textwidth
[[./Images/jerarquiaBuses.jpeg]] 
** Jerarquía de buses múltiples
La respuesta común a esta
situación, por parte de la industria, ha sido proponer un bus de alta velocidad que está estrechamente
integrado con el resto del sistema, y requiere solo un adaptador (bridge) entre el bus del procesador y
el bus de alta velocidad. En algunas ocasiones, esta disposición es conocida como arquitectura de
entreplanta (mezzanine architecture).

#+ATTR_LATEX: :width 0.8\textwidth
[[./Images/jerarquiaBuses2.jpeg]]

** Jerarquía de buses múltiples
La ventaja de esta organización es que el bus de alta velocidad acerca al procesador los dispositi
vos que exigen prestaciones elevadas y al mismo tiempo es independiente del procesador. Así, se pue
den tolerar las diferencias de velocidad entre el procesador y el bus de altas prestaciones y las
variaciones en la definición de las líneas de los buses. Los cambios en la arquitectura del procesador
no afectan al bus de alta velocidad, y viceversa.
** Elementos de Diseño de un Bus (E2, 7)
* Interconexión punto a punto
** Interconexión punto a punto
La interconexión punto a punto consiste en establecer una conexión directa entre dos componentes de un sistema informáticos.
Esta arquitectura reemplazo a los buses compartidos, y la principal razón fue el aumento de frecuencia.

#+begin_export latex
\begin{figure}[!h]
   \vspace{-0.1cm}
   \centering
   \includegraphics[height=4cm, width=0.8\textwidth]{./Images/image1.png}
   \vspace{-0.5cm} % Ajusta el espacio inferior
   \caption{Multiprocesador con QPIs}
   \label{fig:Representacion}
\end{figure}
#+end_export

** Ventajas
*** Ventajas                                                          :BMCOL:
:PROPERTIES:
:BEAMER_col: 0.8
:END:

- Elimina cuellos de botella asociados con buses compartidos. 
- Mejora la escalabilidad en sistemas multiprocesador, ya que cada procesador puede comunicarse con otros sin interferencias.
- Aumenta la velocidad de transferencia y reduce la latencia.
* Introducción QPI
** Introducción QPI
     Fue creado para solucionar los problemas de los buses compartidos, ofreciendo una conexión directa
     y eficiente entre los componentes. Este tipo de interconexión mejora el rendimiento al permitir
     una comunicación más rápida y efectiva entre los procesadores y otros dispositivos, sin las
     restricciones de los buses. 
     \par
** Características QPI: 
   - Múltiples conexiones directas
   - Arquitectura de protocolo en capas
   -  Transferencia de datos en paquetes
     
* QuickPath Interconnect (QPI)

** Características de QPI
   - **Múltiples conexiones directas:**
     - Cada componente (como el procesador, la memoria o los dispositivos de entrada/salida) se conecta
        directamente con otros componentes de manera individual, sin tener que compartir el mismo canal.
     - Al tener conexiones directas, cada componente puede enviar y recibir datos sin esperar turno,
       lo que hace que todo funcione de manera más rápida y eficiente.
   - **Arquitectura de protocolo en capas:**
     - Se usan protocolos como TCP/IP para organizar y manejar la comunicación. En lugar de enviar
       un mensaje de una sola forma simple, se utilizan diferentes pasos o etapas para asegurar que el
       mensaje llegue correctamente.
   - **Transferencia en paquetes:**
     - Los datos no se envían de manera continua, sino que se dividen en paquetes.
     - Cada paquete contiene una parte de los datos y también incluye información adicional, como encabezados
       de control para saber a dónde deben ir los datos y códigos de control de errores para asegurarse de que
       los datos no se pierdan o se dañen durante el envío.

\begin{frame}{QPI una arquitectura de protocolo de cuatro capas}
    \begin{figure}
        \centering
        \includegraphics[width=0.8\textwidth]{./Images/QPI.png} 
        \caption{ Arquitectura  QPI}
    \end{figure}
\end{frame} 


** Arquitectura de protocolo QPI
   - **Capa física:**
     - Está formada por 84 enlaces individuales, cada camino de datos consta de un par de cables,
       llamados "carriles", que transmiten un bit a la vez.
     - Hay 20 carriles en cada dirección: una para enviar datos y otra para recibir.
     - Cada conjunto de 20 bits que se transmite se llama "phit", con una velocidad de transferencia
       de 6.4 giga transferencias por segundo (GT/s).
   - **Capa de enlace:**
     - Realiza dos funciones clave: control de flujo y control de errores.
       Estas se aplican a cada "flit" (unidad de control de flujo).
     - Cada flit tiene una carga útil de 72 bits, que contiene los datos o mensajes.
     - Los flits de datos transportan los bits reales entre los procesadores y el
       controlador de entrada/salida.
     - Los flits de mensaje se utilizan para funciones como el control de flujo y
       el control de errores.
     - El control de flujo asegura que el transmisor no envíe datos más rápido de
       lo que el receptor puede procesar.
     - El control de errores detecta y corrige errores en los datos durante la
       transmisión, si un error se detecta, el receptor solicita al transmisor
        que retransmita los datos dañados.
   - **Capa de enrutamiento:**
     - Se encarga de decidir el camino que un paquete de datos tomará a través
       de los enlaces del sistema.
   - **Capa de protocolo:**
     - Los paquetes de datos se envían entre los componentes del sistema, como
       procesadores y memoria. Estos paquetes tienen un formato estándar, aunque
	     pueden adaptarse según las necesidades de diferentes tipos de dispositivos.
* PCI Express (E4, 11)
** PCI Express (E4, 11)

* Referencias
** Bibliografía
:PROPERTIES:
:BEAMER_opt: allowframebreaks
:END:

#+print_bibliography: 
